name: MSVC on Windows

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations.
    # Consider changing this to true when your workflow is stable.
    strategy:
      fail-fast: false

      matrix:
        os: [windows-2019]
        build_type: [Release]
        arch: [amd64, amd64_x86]
        compiler: [cl]
#        compiler_version: [2022, 2019, 2017, 2015, 2013]
        compiler_version: [2019]
        python_version: ["3.10"]

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs.
      # These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Setup Python ${{ matrix.python_version }}
      # Setup Python.
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python_version }}
        cache: 'pip' # caching pip dependencies

    - name: Install Conan version ${{ matrix.conan_version }}
      # Install conan and Ninja.
      run: pip install -r ${{ github.workspace }}/requirements.txt

    - name: Cache conan dependencies
      # Caching conan dependencies.
      uses: actions/cache@v3
      with:
        path: |
          ~/.conan
          C:/.conan
        key: ${{ runner.OS }}-msvc-${{ matrix.compiler_version }}-${{ matrix.arch }}-conan-cache-${{ hashFiles('~/.conan/**') }}
        restore-keys: |
          ${{ runner.OS }}-msvc-${{ matrix.compiler_version }}-${{ matrix.arch }}-conan-cache-${{ hashFiles('~/.conan/**') }}
          ${{ runner.OS }}-msvc-${{ matrix.compiler_version }}-${{ matrix.arch }}-conan-cache-

    - name: Setup environment for compiling C/C++ code
      # Setup environment for compiling C/C++ code.
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.arch }}
        vsversion : ${{ matrix.compiler_version }}

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory.
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}
        -GNinja

    - name: Build
      # Build your program with the given configuration.
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration.
      run: ctest --build-config ${{ matrix.build_type }}
