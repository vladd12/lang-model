name: GCC and Clang on Linux

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations.
    # Consider changing this to true when your workflow is stable.
    strategy:
      fail-fast: false

      matrix:
        os: [ubuntu-22.04]
        build_type: [Release]
        c_compiler: [gcc, clang]
        python_version: ["3.10"]
        conan_version: ["1.60.2"]
        include:
          - os: ubuntu-22.04
            c_compiler: gcc
            cpp_compiler: g++
            python_version: "3.10"
            conan_version: "1.60.2"
          - os: ubuntu-22.04
            c_compiler: clang
            cpp_compiler: clang++
            python_version: "3.10"
            conan_version: "1.60.2"

    steps:
    - uses: actions/checkout@v3

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs.
      # These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Setup Python ${{ matrix.python_version }}
      # Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python_version }}
        cache: 'pip' # caching pip dependencies
      run: |
          pip install conan=="${{ matrix.conan_version }}"
          pip install ninja

#    - name: Install Conan version ${{ matrix.conan_version }}
#      # Install conan and Ninja
#      run: |
#        pip install conan=="${{ matrix.conan_version }}"
#        pip install ninja

    - name: Cache conan dependencies
      # Caching conan dependencies
      uses: actions/cache@v3
      with:
        path: ~/.conan
        key: ${{ runner.OS }}-conan-cache-${{ hashFiles('**/.conan.db') }}
        restore-keys: |
          ${{ runner.OS }}-conan-cache-

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory.
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}
        -GNinja

    - name: Build
      # Build your program with the given configuration. Note that --config is needed
      # because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed
      # because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
